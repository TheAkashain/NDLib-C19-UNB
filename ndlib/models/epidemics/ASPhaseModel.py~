from ndlib.models.DiffusionModel import DiffusionModel
import numpy as np
import future

__author__ = ["Gaia Noseworthy, UNB"]
__license__ = "BSD-2-Clause"

class ASPhaseModel(DiffusionModel):

    def __init__(self, graph, seed=None):

        super(self.__class__, self).__init__(graph, seed)
        #Name of the model
        self.name = "ASPhaseModel"

        #Define available states a person could be in, yes there are a lot
        self.available_statuses = {
            "Susceptible": 0,
            "Exposed": 1,
            "Symptomatic": 2,
            "Asymptomatic": 3, 
            "Removed": 4,
            "Tested": 5,
            "Tested Removed": 6,
            "Infected": 7,
            "Pre-symp": 8,
        }

        #All possible variables, each should be self explanatory 
        self.parameters = {
            "model": {
                "alpha": {
                    #Probability of going from exposed to the 2 day pre-symtomatic, infectious phase
                            "descr": "E -> Pre-symp Probability",
                    "range": [0, 1],
                    "optional": False},
                "beta": {
                    #Probability of infecting others, taking from base_r0/(connections * mean_disease_length)
                            "descr": "Infection Probability",
                    "range": [0, 1],
                    "optional": False},
                "gamma": {
                    #Probability of recovery per day
                            "descr": "Recovery Probability",
                    "range": [0, 1],
                    "optional": False},
                "phase": {
                    #Defining initial starting state for the patient 0
                            "descr": "Starting State",
                    "range": [0, 2],
                    "optional": False},
                "ptrans1": {
                    #Transition from yellow phase to orange phase case requirements
                            "descr": "State Transition: Y -> O",
                    "range": [0, float("inf")],
                    "optional": False},
                "ptrans2": {
                    #Transition from orange phase to red phase case requirements
                            "descr": "State Transition: O -> R",
                    "range": [0, float("inf")],
                    "optional": False},
                "asymp_chance": {
                    "descr": "Percent of cases that are asymptomatic",
                    "range": [0, 1],
                    "optional": False},
                "asymp_infect": {
                    "descr": "Likelihood of infection from asymptomatic case",
                    "range": [0, 1],
                    "optional": False},
                "symp_test": {
                    "descr": "Probability of a symptomatic case getting tested",
                    "range": [0, 1],
                    "optional": False},
                "rand_test_count": {
                    #Currently not in use
                            "descr": "Number of random people tested per day",
                    "range": [0, 1],
                    "optional": False},
                "days": {
                    "descr": "Days until patient 0 is quarantined",
                    "range": [0, float("inf")],
                    "optional": False},
                "pre-symp_time": {
                    "descr": "Days spent pre-symptomatic, but infectious",
                    "range": [0, float("inf")],
                    "optional": False},
                "test_chance": {
                    "descr": "Accuracy of disease tests",
                    "range": [0, 1],
                    "optional": False},
            },
            "nodes": {
                "Age": {
                    "descr": "Young = 0, Adult = 1, Senior = 2",
                    "range": [0, 2],
                    "optional": False,
                    "default": 1
                },
            },
            "edges": {
                "Phase Requirement": {
                    "descr": "Y Phase: 0 - O Phase: 0.5 - R Phase: 1",
                    "range": [0, 1],
                    "optional": False,
                    "default": 0
                },       
            },
        }

        self.progress = {}
        
    #This code runs for every iteration, or day, in the simulation
    def iteration(self, node_status=False):
        self.clean_initial_status(list(self.available_statuses.values()))

        actual_status = {node: nstatus for node, nstatus in future.utils.iteritems(self.status)}
        
        #If this is the first iteration, create the necessary environment
        if self.actual_iteration == 0:
            self.actual_iteration += 1
            delta, node_count, status_delta = self.status_delta(actual_status)
            if node_status:
                return {"iteration": 0, "status": actual_status.copy(),
                        "node_count": node_count.copy(), "status_delta": status_delta.copy()}
            else:
                return {"iteration": 0, "status": {},
                        "node_count": node_count.copy(), "status_delta": status_delta.copy()}

        days = self.params['model']['days']
        pst = self.params['model']['pre-symp_time']
        
        #This code runs for every node on the graph
        for u in self.graph.nodes:
            u_status = self.status[u]
            
            if u_status != 0:
                #For exposed individuals, they have a random chance of becoming pre-symptomatic,
                #based on the model parameter 'alpha'.
                if u_status == 1: #Exposed
                    eventp = np.random.random_sample()
                    if eventp < self.params['model']['alpha']:
                        actual_status[u] = 8
                        self.progress[u] = 1
                        
                #For pre-symptomatic individuals, they have a random chance of becoming symptomatic
                #or asymptomatic, defined by eventp for transition, and by randtest
                #for which compartment they move to. They also are just as infective as asymptomatic
                #individuals, but only are pre-symptomatic for "pre-symp_time" days.
            elif (u_status == 8):
                neighbors = self.graph.neighbors(u)
                actual_status = self.infect(u, u_status, neighbors, actual_status)
                
                if self.progress[u] < pst:
                    self.progress[u] += 1
                else:
                    randtest = np.random.random_sample()
                    if (randtest < self.params['model']['asymp_chance']):
                        actual_status[u] = 3 #Asymtomatic
                        self.progress[u] = 0
                    else:
                        actual_status[u] = 2 #Symptomatic (infected)
                        self.progress[u] = 0
                            
                #For symptomatic (infected) individuals, they have a random chance to be removed,
                #and also a random chance to be tested (which allows for contact tracing). This
                #could be easily modified to make testing more likely based on phase.
            elif (u_status == 2): #Symptomatic
                    neighbors = self.graph.neighbors(u)
                    actual_status = self.infect(u, u_status, neighbors, actual_status)
                    
                    randtest = np.random.random_sample()
                    eventp = np.random.random_sample()
                    if eventp < self.params['model']['gamma']:
                        actual_status[u] = 4 #Removed
                        self.progress[u] = 0
                    elif randtest < self.params['model']['symp_test']:
                        actual_status[u] = 5 #Tested
                        self.progress[u] = 0
                        
                #For asymptomatic individuals, they have a random chance to be removed. They are 
                #also 1/3 as infective as symptomatic individuals.
            elif (u_status == 3): #Asymptomatic
                neighbors = self.graph.neighbors(u)
                actual_status = self.infect(u, u_status, neighbors, actual_status) 

                eventp = np.random.random_sample()
                if eventp < self.params['model']['gamma']:
                    actual_status[u] = 4 #Removed
                    self.progress[u] = 0
                        
                #For tested invidiuals (specifically meaning they tested positive), their 
                #edge-neighbors are also all tested after X days.
            elif (u_status == 5): #Tested
                if self.progress[u] < 1:
                    self.progress[u] += 0.25
                    
                elif self.progress[u] < 2:
                    neighbors = self.graph.neighbors(u)
                    for v in neighbors: 
                        if (self.status[v] == 2 or self.status[v] == 3 or self.status[v] == 7 or self.status[v] == 8):
                        ranvar = np.random.random_sample()
                        if ranvar <= self.params['model']['test_chance']:
                            actual_status[v] = 5 #Tested
                            self.progress[v] = 0
                            self.progress[u] = 2
                                
                            eventp = np.random.random_sample()
                            if eventp < self.params['model']['gamma']:
                                actual_status[u] = 6 #Tested Removed
                                    
                #This code allows for a tested person to heal, while still having their
                #edge-neighbors tested after X days.
            elif (u_status == 6): #Tested Removed
                if self.progress[u] < 1:
                    self.progress[u] += 0.25
                        
                elif self.progress[u] < 2:
                    neighbors = self.graph.neighbors(u)
                    for v in neighbors: 
                        if (self.status[v] == 2 or self.status[v] == 3 or self.status[v] == 7 or self.status[v] == 8):
                            ranvar = np.random.random_sample()
                            if ranvar <= self.params['model']['test_chance']:
                                actual_status[v] = 5 #Tested
                                self.progress[v] = 0
                                self.progress[u] = 2
                                    
            elif (u_status == 7):
                neighbors = self.graph.neighbors(u)
                actual_status = self.infect(u, u_status, neighbors, actual_status)
                
                try:
                    self.progress[u]
                except KeyError:
                    self.progress[u] = 0
                    
                if self.progress[u] < days:
                    self.progress[u] += 1
                else:
                    actual_status[u] = 5  # Tested
                    self.progress[u] = 0
                        
        #This code block allows for random testing of individuals, as is done in some countries.
        #If this is not wanted, set rand_test_count to 0.
        #random_tests = np.floor(np.random.random_sample(self.params['model']['rand_test_count'])*len(self.graph.nodes))
        #for u in random_tests:
        #    if (actual_status[u] == 2 or actual_status[u] == 3 or actual_status[u] == 7 or actual_status[u] == 8):
        #        actual_status[u] = 5 #Tested
        #        self.progress[u] = 0
        
        #All the data is saved in these blocks, and time is moved forwards 1 day
        delta, node_count, status_delta = self.status_delta(actual_status)
        self.status = actual_status
        self.actual_iteration += 1
        
        #This block updates the phase based on the number of active, tested cases
        #ptrans1 and ptrans2 define the number of cases needed to transition phases
        if (node_count[5] > self.params['model']['ptrans2']):
            self.params['model']['phase'] = 2
        elif (node_count[5] > self.params['model']['ptrans1']):
            self.params['model']['phase'] = 1
        else:
            self.params['model']['phase'] = 0

        #This block returns the final data
        if node_status:
            return {"iteration": self.actual_iteration - 1, "status": delta.copy(),
                    "node_count": node_count.copy(), "status_delta": status_delta.copy()}
        else:
            return {"iteration": self.actual_iteration - 1, "status": {},
                    "node_count": node_count.copy(), "status_delta": status_delta.copy()}
        
    def infect(self, u, u_status, neighbors, actual_status):
        if (u_status == 3 or u_status == 8):
            main_infect_mod = 0.33
        else:
            main_infect_mod = 1
            
        if (self.params['model']['phase'] == 0):
            #print("Phase 0 - Infect")
            for v in neighbors:
                infect_mod = main_infect_mod * self.params['nodes']['Age'][v]
                if self.status[v] == 0:
                    ranvar = np.random.random_sample()
                    if ranvar < self.params['model']['beta']*infect_mod:
                        actual_status[v] = 1
                        self.progress[v] = 0
                        
        elif (self.params['model']['phase'] == 1):
            #print("Phase 1 - Infect")
            for v in neighbors:
                infect_mod = main_infect_mod * self.params['nodes']['Age'][v]
                if self.status[v] == 0:
                    if (u,v) in self.params['edges']['Phase Requirement']:
                        if self.params['edges']['Phase Requirement'][(u,v)] >= 0.5:
                            ranvar = np.random.random_sample()
                            if ranvar  < self.params['model']['beta']*infect_mod:
                                actual_status[v] = 1
                                self.progress[v] = 1
                    elif (v, u) in self.params['edges']['Phase Requirement']:
                         if self.params['edges']['Phase Requirement'][(v,u)] >= 0.5:
                             ranvar = np.random.random_sample()
                            if ranvar  <  self.params['model']['beta']*infect_mod:
                                actual_status[v] = 1
                                self.progress[v] = 1 
                                
        elif (self.params['model']['phase'] == 2):
            #print("Phase 2 - Infect")
            for v in neighbors:
                infect_mod = main_infect_mod * self.params['nodes']['Age'][v]
                if self.status[v] == 0:
                    if (u,v) in self.params['edges']['Phase Requirement']:
                        if self.params['edges']['Phase Requirement'][(u,v)] == 1:
                            ranvar = np.random.random_sample()
                            if ranvar < self.params['model']['beta']*infect_mod:
                                actual_status[v] = 1
                                self.progress[v] = 1
                    elif (v, u) in self.params['edges']['Phase Requirement']:
                         if self.params['edges']['Phase Requirement'][(v,u)] == 1:
                             ranvar = np.random.random_sample()
                            if ranvar < self.params['model']['beta']*infect_mod:
                                actual_status[v] = 1
                                self.progress[v] = 1 
                                
        else:
            #print("Phase X - Infect")
            for v in neighbors:
                infect_mod = main_infect_mod * self.params['nodes']['Age'][v]
                if self.status[v] == 0:
                    ranvar = np.random.random_sample()
                    if ranvar < self.params['model']['beta']*infect_mod:
                        actual_status[v] = 1
                        self.progress[v] = 0
                        
        return (actual_status)
